{"version":3,"sources":["Almanac.tsx","App.js","serviceWorker.js","index.js"],"names":["Alamnac","props","bpLg","bpMd","colLg","colMd","colSm","gutterLen","dayContainerWidth","containerClass","monthContainerClass","dayContainerClass","pickClass","inputClass","data","React","useRef","today","Date","dayNumOfMonth","monthName","dayOfWeekName","useState","current","getFullYear","year","setYear","almanacData","setAlmanacData","makeAlmanac","useCallback","_year","almanacArr","_dayNumOfMonth","fill","monthIndex","monthArr","weekArr","dayCount","dayOfWeek","getDay","day","isActive","push","fill_BeforeVacancy","dateOfWeekbeforeMonth","getDate","index","fill_AfterVacancy","month","length","weekLen","dayLength_Of_LastWeek","useEffect","pickToday","getMonth","date","el","document","querySelector","classList","add","Almanac","styled","section","data-testid","className","type","defaultValue","id","onClick","inputEl","getElementById","_value","Number","value","Math","floor","alert","handleCLickShow","map","monthData","key","dayOfWeekNameIndex","weekData","weekIndex","dayData","dayIndex","data-monthanddate","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+pDAmCe,SAASA,EAAQC,GAAgB,IAAD,EAczCA,EAZFC,YAF2C,MAEpC,IAFoC,IAczCD,EAXFE,YAH2C,MAGpC,IAHoC,IAczCF,EAVFG,aAJ2C,MAInC,EAJmC,IAczCH,EATFI,aAL2C,MAKnC,EALmC,IAczCJ,EARFK,aAN2C,MAMnC,GANmC,IAczCL,EAPFM,iBAP2C,MAO/B,GAP+B,IAczCN,EANFO,yBAR2C,MAQvB,GARuB,IAczCP,EALFQ,sBAT2C,MAS1B,GAT0B,IAczCR,EAJFS,2BAV2C,MAUrB,GAVqB,IAczCT,EAHFU,yBAX2C,MAWvB,GAXuB,IAczCV,EAFFW,iBAZ2C,MAY/B,GAZ+B,IAczCX,EADFY,kBAb2C,MAa9B,GAb8B,EAevCC,EAAOC,IAAMC,OAAO,CACxBC,MAAO,IAAIC,KACXC,cAAe,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC5DC,UAAW,CACT,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAEFC,cAAe,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,OAhCH,EAkCrBN,IAAMO,SAC5BR,EAAKS,QAAQN,MAAMO,eAnCwB,mBAkCtCC,EAlCsC,KAkChCC,EAlCgC,OAqCPX,IAAMO,SAAqB,IArCpB,mBAqCtCK,EArCsC,KAqCzBC,EArCyB,KAsCvCC,EAAcd,IAAMe,aAAY,SAACL,GACrC,IAEuBM,EAFnBC,EAAyB,GACvBC,EAAc,YAAOnB,EAAKS,QAAQJ,eACjBY,EAQTN,EALVQ,EAAe,GADbF,EAAQ,IAAM,EACI,GAEA,GAiExB,IA7DA,IAAMG,EAAO,SAACC,GAKZ,IAJA,IAAIC,EAAqB,GACrBC,EAAkB,GAElBC,EAAW,EAOTC,EAAY,IAAIrB,KAAKO,EAAMU,EAAY,GAAGK,SAC9CF,EAAWL,EAAeE,GAC1BI,IAEAD,GAAY,EACZD,EAAQE,GAAa,CAAEE,IAAKH,EAAUI,UAAU,GAC5CJ,IAAaL,EAAeE,IAA6B,IAAdI,IAE7CH,EAASO,KAAT,YAAkBN,IAClBA,EAAU,GACVE,GAAa,GAGjBP,EAAWW,KAAX,YAAoBP,IACpBA,EAAW,IAEPQ,EAAqB,SAACT,GAI1B,IAFA,IAAII,EAAY,IAAIrB,KAAKO,EAAMU,EAAY,GAAGK,SAC1CK,EAAwB,IAAI3B,KAAKO,EAAMU,EAAY,GAAGW,UACjDC,EAAQR,EAAY,EAAGQ,GAAS,EAAGA,IAC1Cf,EAAWG,GAAY,GAAGY,GAAS,CACjCN,IAAKI,EACLH,UAAU,GAEZG,GAAyB,GAGvBG,EAAoB,SAACb,GAEzB,IAAMc,EAAQjB,EAAWG,GACzB,GAAqB,IAAjBc,EAAMC,QAAmD,IAAnCD,EAAMA,EAAMC,OAAS,GAAGA,OAKlD,IADA,IAAIZ,EAAW,IACF,CACX,IAAMa,EAAUF,EAAMC,OAChBE,EAAwBH,EAAME,EAAU,GAAGD,OAEjD,GADAZ,GAAY,EACI,IAAZa,GAA2C,IAA1BC,EAEnB,MACmC,IAA1BA,EACTH,EAAMN,KAAK,CAAC,CAAEF,IAAKH,EAAUI,UAAU,KAEvCO,EAAME,EAAU,GAAGR,KAAK,CAAEF,IAAKH,EAAUI,UAAU,MAIhDP,EAAa,EAAGA,EAAa,GAAIA,IACxCD,EAAKC,GACLS,EAAmBT,GACnBa,EAAkBb,GAEpB,OAAOH,IACN,IACHjB,IAAMsC,WAAU,WACdzB,EAAeC,EAAYJ,MAC1B,CAACA,IACJV,IAAMsC,WAAU,WACdC,EAAU7B,KACT,CAACE,IACJ,IAaM2B,EAAY,SAACvB,GACjB,GAAIA,IAAUjB,EAAKS,QAAQN,MAAMO,cAAjC,CAGA,IAAMW,EAAarB,EAAKS,QAAQN,MAAMsC,WAChCC,EAAO1C,EAAKS,QAAQN,MAAM6B,UAC1BW,EAAKC,SAASC,cAAT,8BACcxB,EADd,YAC4BqB,EAD5B,OAGT,OAAFC,QAAE,IAAFA,KAAIG,UAAUC,IAAI,qBACdjD,IACA,OAAF6C,QAAE,IAAFA,KAAIG,UAAUC,IAAIjD,MAGhBkD,EAAUC,IAAOC,QAAV,cAUWzD,EAVX,gBAWUA,EAXV,iBAgBUA,EAhBV,iBAiBWA,EAjBX,gBAyBWA,EAzBX,gBA0BUA,EA1BV,gBA4BeL,EA5Bf,gBA6BK,IAAME,EAAS,GA7BpB,eA+BgBF,EA/BhB,gBA+BgDC,EA/BhD,gBAgCO,IAAME,EAAS,GAhCtB,eAkCeF,EAlCf,gBAmCO,IAAMG,EAAS,GAnCtB,KA+CoB,EAApBE,EAAwB,KAQxBA,EAAoB,KACnBA,EAAoB,MAalC,OACE,kBAACsD,EAAD,CAASG,cAAY,kBACK,IAAvBtC,EAAYuB,OACX,wCAEA,oCACE,yBAAKgB,UAAS,0BAAqBrD,IACjC,2BACEsD,KAAK,SACLC,aAAc3C,EACd4C,GAAG,gBACHJ,cAAY,kBAEd,4BACEE,KAAK,SACLF,cAAY,kBACZK,QAAS,kBAhHG,WACtB,IAAMC,EAAUb,SAASc,eACvB,iBAEF,GAAID,EAAS,CACX,IAAME,EAASC,OAAOH,EAAQI,OAC9B,GAAIF,EAAS,MAAQA,EAAS,GAAKG,KAAKC,MAAMJ,KAAYA,EAExD,YADAK,MAAM,sEAGRpD,EAAQ+C,IAsGeM,KAHjB,SAQF,yBAAKb,UAAS,4BAAuBzD,IACnC,yBAAKyD,UAAU,eACZvC,EAAYqD,KAAI,SAACC,EAAW9C,GAAZ,OACf,yBACE+B,UAAS,wBAAmBxD,GAC5BwE,IAAK/C,GAEL,yBAAK+B,UAAU,kCACZpD,EAAKS,QAAQH,UAAUe,IAE1B,yBAAK+B,UAAU,gBACZpD,EAAKS,QAAQF,cAAc2D,KAC1B,SAAC3D,EAAe8D,GAAhB,OACE,0BACEjB,UAAS,4CAAuCvD,GAChDuE,IAAKC,GAEJ9D,OAKR4D,EAAUD,KAAI,SAACI,EAAUC,GAAX,OACb,yBACEnB,UAAU,eACVgB,IAAKG,EACLpB,cAAY,QAEXmB,EAASJ,KAAI,SAACM,EAASC,GAAV,OACZ,0BACErB,UAAS,sBAAiBoB,EAAQ5C,UAChC,yBADO,YACqB/B,GAC9BuE,IAAKI,EAAQ7C,IACb+C,oBACEF,EAAQ5C,UAAR,UAAuBP,EAAvB,YAAqCmD,EAAQ7C,MAG9C6C,EAAQ7C,oBC7SpBgD,MARf,WACE,OACE,yBAAKvB,UAAU,OACb,kBAAC,EAAD,QCKcwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAAStC,SAASc,eAAe,SD8H3C,kBAAmByB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.77b3351d.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\ninterface IProps {\n  bpLg?: number;\n  bpMd?: number;\n  colLg?: number;\n  colMd?: number;\n  colSm?: number;\n  gutterLen?: number;\n  containerClass?: string;\n  monthContainerClass?: string;\n  dayContainerClass?: string;\n  dayContainerWidth?: number;\n  pickClass?: string;\n  inputClass?: string;\n}\ninterface IDay {\n  day: number;\n  isActive: boolean;\n}\n/**\n * in props\n * @param {number} bpLg - breakPoint for lg size, default 992.\n * @param {number} bpMd - breakPoint for md size, default 768.\n * @param {number} colLg - colNum in lg size, a row contain 12 col, default 3.\n * @param {number} colMd - colNum in md size, default 4.\n * @param {number} colSm - colNum smaller than md size, default 12.\n * @param {number} gutterLen - gutter between col, default 15(px).\n * @param {number} dayContainerWidth - default 30(px).\n * @param {string} containerClass - class for all almanac container.\n * @param {string} monthContainerClass - class for single month container.\n * @param {string} dayContainerClass - class for single day container.\n * @param {string} pickClass - class for pick container.\n * @param {string} inputClass - class for pick container.\n */\nexport default function Alamnac(props: IProps) {\n  const {\n    bpLg = 992,\n    bpMd = 768,\n    colLg = 3,\n    colMd = 4,\n    colSm = 12,\n    gutterLen = 15,\n    dayContainerWidth = 30,\n    containerClass = \"\",\n    monthContainerClass = \"\",\n    dayContainerClass = \"\",\n    pickClass = \"\",\n    inputClass = \"\"\n  } = props;\n  const data = React.useRef({\n    today: new Date(),\n    dayNumOfMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n    monthName: [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"Septemper\",\n      \"October\",\n      \"November\",\n      \"December\"\n    ],\n    dayOfWeekName: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"]\n  });\n  const [year, setYear] = React.useState<number>(\n    data.current.today.getFullYear()\n  );\n  const [almanacData, setAlmanacData] = React.useState<IDay[][][]>([]);\n  const makeAlmanac = React.useCallback((year: number): IDay[][][] => {\n    let almanacArr: IDay[][][] = [];\n    const _dayNumOfMonth = [...data.current.dayNumOfMonth]; //copy\n    const checkLeapYear = (_year: number): void => {\n      //檢查閏年\n      if (_year % 4 === 0) {\n        _dayNumOfMonth[1] = 29;\n      } else {\n        _dayNumOfMonth[1] = 28;\n      }\n    };\n    checkLeapYear(year);\n    const fill = (monthIndex: number) => {\n      let monthArr: IDay[][] = [];\n      let weekArr: IDay[] = [];\n      //遞迴每一月\n      let dayCount = 0;\n      for (\n        //遞迴每一週\n        //第一周起始index為一號的禮拜幾\n        //取得Y年 X月一號是禮拜幾\n        //注意，0為星期天\n        //注意，月份0為一月\n        let dayOfWeek = new Date(year, monthIndex, 1).getDay();\n        dayCount < _dayNumOfMonth[monthIndex]; //到那個月最後一天\n        dayOfWeek++\n      ) {\n        dayCount += 1;\n        weekArr[dayOfWeek] = { day: dayCount, isActive: true }; //在X周的禮拜Y加上日期\n        if (dayCount === _dayNumOfMonth[monthIndex] || dayOfWeek === 6) {\n          //這禮拜run完 或是已經到最後一周+已經到當月最後一天\n          monthArr.push([...weekArr]);\n          weekArr = [];\n          dayOfWeek = -1;\n        }\n      }\n      almanacArr.push([...monthArr]);\n      monthArr = [];\n    };\n    const fill_BeforeVacancy = (monthIndex: number) => {\n      //填補一號之前的空缺\n      let dayOfWeek = new Date(year, monthIndex, 1).getDay();\n      let dateOfWeekbeforeMonth = new Date(year, monthIndex, 0).getDate();\n      for (let index = dayOfWeek - 1; index > -1; index--) {\n        almanacArr[monthIndex][0][index] = {\n          day: dateOfWeekbeforeMonth,\n          isActive: false\n        };\n        dateOfWeekbeforeMonth -= 1;\n      }\n    };\n    const fill_AfterVacancy = (monthIndex: number) => {\n      //填補當月最後一天之後的空缺\n      const month = almanacArr[monthIndex];\n      if (month.length === 6 && month[month.length - 1].length === 7) {\n        //如果當好最後一天是第六周的禮拜六\n        return;\n      }\n      let dayCount = 0;\n      while (true) {\n        const weekLen = month.length;\n        const dayLength_Of_LastWeek = month[weekLen - 1].length;\n        dayCount += 1;\n        if (weekLen === 6 && dayLength_Of_LastWeek === 7) {\n          //如果已經滿六周，且第六周已經到禮拜六，跳出\n          break;\n        } else if (dayLength_Of_LastWeek === 7) {\n          month.push([{ day: dayCount, isActive: false }]); //如果未滿六周，且最後一周到禮拜六，+一周\n        } else {\n          month[weekLen - 1].push({ day: dayCount, isActive: false }); //如果未滿六周，且最後一周還沒到禮拜六，+一天\n        }\n      }\n    };\n    for (let monthIndex = 0; monthIndex < 12; monthIndex++) {\n      fill(monthIndex);\n      fill_BeforeVacancy(monthIndex);\n      fill_AfterVacancy(monthIndex);\n    }\n    return almanacArr;\n  }, []);\n  React.useEffect(() => {\n    setAlmanacData(makeAlmanac(year));\n  }, [year]);\n  React.useEffect(() => {\n    pickToday(year);\n  }, [almanacData]);\n  const handleCLickShow = () => {\n    const inputEl = document.getElementById(\n      \"almanac-input\"\n    ) as HTMLInputElement;\n    if (inputEl) {\n      const _value = Number(inputEl.value);\n      if (_value > 9999 || _value < 1 || Math.floor(_value) !== _value) {\n        alert(\"請輸入介於1~9999之間的整數\");\n        return;\n      }\n      setYear(_value);\n    }\n  };\n  const pickToday = (_year: number): void => {\n    if (_year !== data.current.today.getFullYear()) {\n      return;\n    }\n    const monthIndex = data.current.today.getMonth();\n    const date = data.current.today.getDate();\n    const el = document.querySelector(\n      `[data-monthanddate='${monthIndex},${date}']`\n    );\n    el?.classList.add(\"almanac-day--pick\");\n    if (pickClass) {\n      el?.classList.add(pickClass);\n    }\n  };\n  const Almanac = styled.section`\n  *{\n    box-sizing:border-box;\n  }\n  .input-container{\n    text-align:center;\n    margin-bottom:15px;\n  }\n    .almanac-container {\n      width: 100%;\n      padding-right: ${`${gutterLen}px`};\n      padding-left: ${`${gutterLen}px`};\n      margin-right: auto;\n      margin-left: auto;\n    }\n    .almanac-row {\n      margin-left: ${`-${gutterLen}px`};\n      margin-right: ${`-${gutterLen}px`};\n      display: flex;\n      flex-wrap: wrap;\n    }\n    .almanac-month {\n      position: relative;\n      width: 100%;\n      min-height: 1px;\n      padding-right: ${`${gutterLen}px`};\n      padding-left: ${`${gutterLen}px`};\n      margin-bottom:15px;\n      @media (min-width: ${`${bpLg}px`}) {\n        width:${`${(100 * colLg) / 12}%`};\n        }\n      @media (max-width:  ${`${bpLg}px`}) and (min-width: ${`${bpMd}px`}) {\n          width:${`${(100 * colMd) / 12}%`};\n        }\n      @media (max-width: ${`${bpMd}px`}) {\n          width:${`${(100 * colSm) / 12}%`};\n        }\n      }\n    }\n    .almanac-dayOfWeekName {\n      font-weight:700;\n    }\n    .almanac-week {\n      white-space:nowrap;\n      display:block;\n      margin-left:auto;\n      margin-right:auto;\n      width: ${dayContainerWidth * 7 + \"px\"};\n    }\n    .almanac-monthName{\n      text-align:left;\n      font-weight:700;\n    }\n    .almanac-day {\n      display: inline-flex;\n      width: ${dayContainerWidth + \"px\"};\n      height: ${dayContainerWidth + \"px\"};\n      justify-content:center;\n      align-items:center;\n    }\n    .almanac-day--notActive {\n      color:gray;\n    }\n    .almanac-day--pick {\n      border-radius:50%;\n      color:white;\n      background-color:#456789;\n    }\n  `;\n  return (\n    <Almanac data-testid=\"almanacWrapper\">\n      {almanacData.length === 0 ? (\n        <div>loading</div>\n      ) : (\n        <>\n          <div className={`input-container ${inputClass}`}>\n            <input\n              type=\"number\"\n              defaultValue={year}\n              id=\"almanac-input\"\n              data-testid=\"almanac-input\"\n            />\n            <button\n              type=\"button\"\n              data-testid=\"almanac-showBtn\"\n              onClick={() => handleCLickShow()}\n            >\n              SHOW\n            </button>\n          </div>\n          <div className={`almanac-container ${containerClass}`}>\n            <div className=\"almanac-row\">\n              {almanacData.map((monthData, monthIndex) => (\n                <div\n                  className={`almanac-month ${monthContainerClass}`}\n                  key={monthIndex}\n                >\n                  <div className=\"almanac-week almanac-monthName\">\n                    {data.current.monthName[monthIndex]}\n                  </div>\n                  <div className=\"almanac-week\">\n                    {data.current.dayOfWeekName.map(\n                      (dayOfWeekName, dayOfWeekNameIndex) => (\n                        <span\n                          className={`almanac-day almanac-dayOfWeekName ${dayContainerClass}`}\n                          key={dayOfWeekNameIndex}\n                        >\n                          {dayOfWeekName}\n                        </span>\n                      )\n                    )}\n                  </div>\n                  {monthData.map((weekData, weekIndex) => (\n                    <div\n                      className=\"almanac-week\"\n                      key={weekIndex}\n                      data-testid=\"week\"\n                    >\n                      {weekData.map((dayData, dayIndex) => (\n                        <span\n                          className={`almanac-day ${dayData.isActive ||\n                            \"almanac-day--notActive\"} ${dayContainerClass}`}\n                          key={dayData.day}\n                          data-monthanddate={\n                            dayData.isActive && `${monthIndex},${dayData.day}`\n                          }\n                        >\n                          {dayData.day}\n                        </span>\n                      ))}\n                    </div>\n                  ))}\n                </div>\n              ))}\n            </div>\n          </div>\n        </>\n      )}\n    </Almanac>\n  );\n}\n","import React from 'react';\nimport Almanac from './Almanac'\nimport Question2 from './question2'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Almanac/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}